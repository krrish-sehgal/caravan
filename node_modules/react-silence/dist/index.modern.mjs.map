{"version":3,"file":"index.modern.mjs","sources":["../index.ts"],"sourcesContent":["import { useEffect } from \"react\";\n\ntype LogType = \"error\" | \"log\" | \"warn\" | \"info\";\n\nconst allLogTypes: LogType[] = [\"error\", \"log\", \"warn\", \"info\"];\nconst og = allLogTypes.reduce(\n  (obj, type) => ({\n    [type]: console[type],\n    ...obj,\n  }),\n  {} as Record<LogType, (...msg: string[]) => void>\n);\n\nconst getLogTypesAndMatchers = (\n  logTypesOrMatchers: Array<LogType | RegExp>\n) => {\n  const logTypes: LogType[] = [];\n  const matchers: RegExp[] = [];\n  logTypesOrMatchers.forEach((el) => {\n    if (typeof el === \"string\") {\n      if (!og[el]) {\n        og.error(\n          `Passed a string to silence which was not a log type. Ignoring: \"${el}\"`\n        );\n      } else {\n        logTypes.push(el);\n      }\n    } else {\n      matchers.push(el);\n    }\n  });\n  return { logTypes, matchers };\n};\n\n/**\n * Turns off the console for the given log types and any text matching the given matchers.\n * Will remain off until a matching `unsilence` call.\n * */\nexport const silence = (...logTypesOrMatchers: Array<LogType | RegExp>) => {\n  const { logTypes, matchers } = getLogTypesAndMatchers(logTypesOrMatchers);\n  logTypes.forEach((logType) => {\n    console[logType] = (...args: string[]) => {\n      // Do nothing if no matchers or matchers match\n      if (!matchers.length) return;\n      if (matchers.some((reg) => reg.test(args[0]))) return;\n\n      og[logType](...args);\n    };\n  });\n};\n\n/**\n * Restores normal console functionality. If given types, restores for that type.\n * By default, unsilences all console log types.\n * */\nexport const unsilence = (...logTypes: LogType[]) => {\n  (logTypes.length ? logTypes : allLogTypes).forEach((logType) => {\n    console[logType] = og[logType];\n  });\n};\n\n/** Turns silence on in a before block in the describe, and then unsilences after. */\nexport const silenceDescribe = (\n  ...logTypesOrMatchers: Array<LogType | RegExp>\n) => {\n  const { logTypes } = getLogTypesAndMatchers(logTypesOrMatchers);\n  beforeAll(() => {\n    silence(...logTypesOrMatchers);\n  });\n\n  afterAll(() => {\n    unsilence(...logTypes);\n  });\n};\n\n/*Turns silence on and off for the code run within the callback passed as a first argument. */\nexport const silenceWithin = (\n  action: () => void,\n  ...logTypesOrMatchers: Array<LogType | RegExp>\n) => {\n  const { logTypes } = getLogTypesAndMatchers(logTypesOrMatchers);\n  silence(...logTypesOrMatchers);\n  action();\n  unsilence(...logTypes);\n};\n\n/** Creates an returns set of silencer functions configured to the same set of log types and matchers. */\nexport const silenceFor = (...logTypesOrMatchers: Array<LogType | RegExp>) => {\n  const { logTypes } = getLogTypesAndMatchers(logTypesOrMatchers);\n  return {\n    silence: () => silence(...logTypesOrMatchers),\n    unsilence: () => unsilence(...logTypes),\n    silenceDescribe: () => silenceDescribe(...logTypesOrMatchers),\n    silenceWithin: (action) => silenceWithin(action, ...logTypesOrMatchers),\n  };\n};\n\nexport const matchers = {\n  reactKeysError: /Each child in a list should have a unique \"key\" prop/,\n  jestActError: /inside a test was not wrapped in act/,\n  deprecationWarning:\n    /is deprecated and will be removed in a future major release/,\n};\n\n/** Silences within the body of a React component. */\nexport const useSilence = (...logTypesOrMatchers: Array<LogType | RegExp>) => {\n  const { logTypes } = getLogTypesAndMatchers(logTypesOrMatchers);\n  silence(...logTypesOrMatchers);\n\n  useEffect(() => {\n    unsilence(...logTypes);\n  });\n};\n"],"names":["allLogTypes","og","reduce","obj","type","_extends","console","logTypesOrMatchers","logTypes","matchers","forEach","el","push","error","silence","getLogTypesAndMatchers","logType","args","length","some","reg","test","silenceDescribe","beforeAll","afterAll","unsilence","silenceWithin","action","reactKeysError","jestActError","deprecationWarning","useSilence","useEffect"],"mappings":"sQAIA,MAAiBA,EAAc,CAAC,QAAS,MAAO,OAAQ,QAChDC,EAAGD,EAAYE,OACrB,CAACC,EAAKC,IACJC,EAAA,CAAAD,CAACA,GAAOE,QAAQF,IACbD,GAEL,MAIAI,IAEA,MAAMC,EAAsB,GACdC,EAAa,GAc3B,OAbAF,EAAmBG,QAASC,IACR,iBAAdA,EACGV,EAAGU,GAKNH,EAASI,KAAKD,GAJdV,EAAGY,yEACkEF,MAMvEF,EAASG,KAAKD,KAGX,CAAEH,WAAUC,aAODK,EAAG,IAAIP,KACzB,MAAMC,SAAEA,EAAFC,SAAYA,GAAaM,EAAuBR,GACtDC,EAASE,QAASM,IAChBV,QAAQU,GAAW,IAAIC,KAEhBR,EAASS,SACVT,EAASU,KAAMC,GAAQA,EAAIC,KAAKJ,EAAK,MAEzChB,EAAGe,MAAYC,UASI,IAAIT,MAC1BA,EAASU,OAASV,EAAWR,GAAaU,QAASM,IAClDV,QAAQU,GAAWf,EAAGe,MAKEM,EAAG,IAC1Bf,KAEH,MAAMC,SAAEA,GAAaO,EAAuBR,GAC5CgB,UAAU,KACRT,KAAWP,KAGbiB,SAAS,KACPC,KAAajB,MAKJkB,EAAgB,CAC3BC,KACGpB,KAEH,MAAMC,SAAEA,GAAaO,EAAuBR,GAC5CO,KAAWP,GACXoB,IACAF,KAAajB,MAIW,IAAID,KAC5B,MAAMC,SAAEA,GAAaO,EAAuBR,GAC5C,MAAO,CACLO,QAAS,IAAMA,KAAWP,GAC1BkB,UAAW,IAAMA,KAAajB,GAC9Bc,gBAAiB,IAAMA,KAAmBf,GAC1CmB,cAAgBC,GAAWD,EAAcC,KAAWpB,KAInCE,EAAG,CACtBmB,eAAgB,uDAChBC,aAAc,uCACdC,mBACE,+DAISC,EAAa,IAAIxB,KAC5B,MAAMC,SAAEA,GAAaO,EAAuBR,GAC5CO,KAAWP,GAEXyB,EAAU,KACRP,KAAajB"}