import{useEffect as e}from"react";function r(){return r=Object.assign?Object.assign.bind():function(e){for(var r=1;r<arguments.length;r++){var o=arguments[r];for(var n in o)Object.prototype.hasOwnProperty.call(o,n)&&(e[n]=o[n])}return e},r.apply(this,arguments)}const o=["error","log","warn","info"],n=o.reduce((e,o)=>r({[o]:console[o]},e),{}),t=e=>{const r=[],o=[];return e.forEach(e=>{"string"==typeof e?n[e]?r.push(e):n.error(`Passed a string to silence which was not a log type. Ignoring: "${e}"`):o.push(e)}),{logTypes:r,matchers:o}},s=(...e)=>{const{logTypes:r,matchers:o}=t(e);r.forEach(e=>{console[e]=(...r)=>{o.length&&(o.some(e=>e.test(r[0]))||n[e](...r))}})},c=(...e)=>{(e.length?e:o).forEach(e=>{console[e]=n[e]})},a=(...e)=>{const{logTypes:r}=t(e);beforeAll(()=>{s(...e)}),afterAll(()=>{c(...r)})},i=(e,...r)=>{const{logTypes:o}=t(r);s(...r),e(),c(...o)},l=(...e)=>{const{logTypes:r}=t(e);return{silence:()=>s(...e),unsilence:()=>c(...r),silenceDescribe:()=>a(...e),silenceWithin:r=>i(r,...e)}},p={reactKeysError:/Each child in a list should have a unique "key" prop/,jestActError:/inside a test was not wrapped in act/,deprecationWarning:/is deprecated and will be removed in a future major release/},h=(...r)=>{const{logTypes:o}=t(r);s(...r),e(()=>{c(...o)})};export{p as matchers,s as silence,a as silenceDescribe,l as silenceFor,i as silenceWithin,c as unsilence,h as useSilence};
//# sourceMappingURL=index.modern.mjs.map
