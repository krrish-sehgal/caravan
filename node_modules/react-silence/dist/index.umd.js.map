{"version":3,"file":"index.umd.js","sources":["../index.ts"],"sourcesContent":["import { useEffect } from \"react\";\n\ntype LogType = \"error\" | \"log\" | \"warn\" | \"info\";\n\nconst allLogTypes: LogType[] = [\"error\", \"log\", \"warn\", \"info\"];\nconst og = allLogTypes.reduce(\n  (obj, type) => ({\n    [type]: console[type],\n    ...obj,\n  }),\n  {} as Record<LogType, (...msg: string[]) => void>\n);\n\nconst getLogTypesAndMatchers = (\n  logTypesOrMatchers: Array<LogType | RegExp>\n) => {\n  const logTypes: LogType[] = [];\n  const matchers: RegExp[] = [];\n  logTypesOrMatchers.forEach((el) => {\n    if (typeof el === \"string\") {\n      if (!og[el]) {\n        og.error(\n          `Passed a string to silence which was not a log type. Ignoring: \"${el}\"`\n        );\n      } else {\n        logTypes.push(el);\n      }\n    } else {\n      matchers.push(el);\n    }\n  });\n  return { logTypes, matchers };\n};\n\n/**\n * Turns off the console for the given log types and any text matching the given matchers.\n * Will remain off until a matching `unsilence` call.\n * */\nexport const silence = (...logTypesOrMatchers: Array<LogType | RegExp>) => {\n  const { logTypes, matchers } = getLogTypesAndMatchers(logTypesOrMatchers);\n  logTypes.forEach((logType) => {\n    console[logType] = (...args: string[]) => {\n      // Do nothing if no matchers or matchers match\n      if (!matchers.length) return;\n      if (matchers.some((reg) => reg.test(args[0]))) return;\n\n      og[logType](...args);\n    };\n  });\n};\n\n/**\n * Restores normal console functionality. If given types, restores for that type.\n * By default, unsilences all console log types.\n * */\nexport const unsilence = (...logTypes: LogType[]) => {\n  (logTypes.length ? logTypes : allLogTypes).forEach((logType) => {\n    console[logType] = og[logType];\n  });\n};\n\n/** Turns silence on in a before block in the describe, and then unsilences after. */\nexport const silenceDescribe = (\n  ...logTypesOrMatchers: Array<LogType | RegExp>\n) => {\n  const { logTypes } = getLogTypesAndMatchers(logTypesOrMatchers);\n  beforeAll(() => {\n    silence(...logTypesOrMatchers);\n  });\n\n  afterAll(() => {\n    unsilence(...logTypes);\n  });\n};\n\n/*Turns silence on and off for the code run within the callback passed as a first argument. */\nexport const silenceWithin = (\n  action: () => void,\n  ...logTypesOrMatchers: Array<LogType | RegExp>\n) => {\n  const { logTypes } = getLogTypesAndMatchers(logTypesOrMatchers);\n  silence(...logTypesOrMatchers);\n  action();\n  unsilence(...logTypes);\n};\n\n/** Creates an returns set of silencer functions configured to the same set of log types and matchers. */\nexport const silenceFor = (...logTypesOrMatchers: Array<LogType | RegExp>) => {\n  const { logTypes } = getLogTypesAndMatchers(logTypesOrMatchers);\n  return {\n    silence: () => silence(...logTypesOrMatchers),\n    unsilence: () => unsilence(...logTypes),\n    silenceDescribe: () => silenceDescribe(...logTypesOrMatchers),\n    silenceWithin: (action) => silenceWithin(action, ...logTypesOrMatchers),\n  };\n};\n\nexport const matchers = {\n  reactKeysError: /Each child in a list should have a unique \"key\" prop/,\n  jestActError: /inside a test was not wrapped in act/,\n  deprecationWarning:\n    /is deprecated and will be removed in a future major release/,\n};\n\n/** Silences within the body of a React component. */\nexport const useSilence = (...logTypesOrMatchers: Array<LogType | RegExp>) => {\n  const { logTypes } = getLogTypesAndMatchers(logTypesOrMatchers);\n  silence(...logTypesOrMatchers);\n\n  useEffect(() => {\n    unsilence(...logTypes);\n  });\n};\n"],"names":["og","allLogTypes","reduce","obj","type","_extends2","_extends","console","getLogTypesAndMatchers","logTypesOrMatchers","logTypes","matchers","forEach","el","push","error","_silence","slice","call","arguments","_getLogTypesAndMatche","logType","args","length","some","reg","test","_unsilence","silenceDescribe","beforeAll","silence","apply","afterAll","unsilence","silenceWithin","action","reactKeysError","jestActError","deprecationWarning","_silenceDescribe","_silenceWithin","useEffect"],"mappings":"6eAIA,MAA+B,CAAC,QAAS,MAAO,OAAQ,QAClDA,EAAKC,EAAYC,OACrB,SAACC,EAAKC,GAAN,IAAAC,EAAA,OAAAC,IAAAD,EAAA,IACGD,GAAOG,QAAQH,GADlBC,GAEKF,IAEL,IAG0BK,EAAG,SAC7BC,GAEA,IAAcC,EAAc,GACdC,EAAa,GAc3B,OAbAF,EAAmBG,QAAQ,SAACC,GACR,iBAAdA,EACGb,EAAGa,GAKNH,EAASI,KAAKD,GAJdb,EAAGe,MACkEF,mEAAAA,OAMvEF,EAASG,KAAKD,KAGX,CAAEH,SAAAA,EAAUC,SAAAA,IAODK,EAAG,WACrB,MAA+BR,EAAsB,GAAAS,MAAAC,KAAAC,YAA7CT,EAAAA,EAAAA,SAAUC,EAAlBS,EAAkBT,SAClBD,EAASE,QAAQ,SAACS,GAChBd,QAAQc,GAAW,WAAIC,IAAAA,2BAEhBX,EAASY,SACVZ,EAASa,KAAK,SAACC,GAAQA,OAAAA,EAAIC,KAAKJ,EAAK,OAEzCtB,EAAGqB,GAAHrB,MAAAA,EAAesB,QASCK,EAAG,WAAIjB,IAAAA,EAC3B,GAAAO,MAAAC,KAAAC,YAACT,EAASa,OAASb,EAAWT,GAAaW,QAAQ,SAACS,GAClDd,QAAQc,GAAWrB,EAAGqB,MAKbO,EAAkB,WAE3B,IAAAnB,EAAA,GAAAQ,MAAAC,KAAAC,aACmBX,EAAuBC,GAApCC,IAAAA,SACRmB,UAAU,WACRC,EAAAC,WAAA,EAAWtB,KAGbuB,SAAS,WACPC,EAASF,aAAIrB,MAKJwB,EAAgB,SAC3BC,GAEE,IAAA1B,EAAA,GAAAQ,MAAAC,KAAAC,UAAA,GACmBX,EAAAA,EAAuBC,GAApCC,EAAAA,EAAAA,SACRoB,EAAOC,WAAItB,EAAAA,GACX0B,IACAF,EAASF,WAAIrB,EAAAA,eAcS,CACtB0B,eAAgB,uDAChBC,aAAc,uCACdC,mBACE,4GAdsB,WAAmD,IAAA7B,EAAA,GAAAQ,MAAAC,KAAAC,WACtDX,EAAAA,EAAuBC,GAApCC,EAAAA,EAAAA,SACR,MAAO,CACLoB,QAAS,WAAMA,OAAAA,aAAWrB,EAAAA,IAC1BwB,UAAW,WAAMA,OAAAA,EAAAF,WAAA,EAAarB,IAC9BkB,gBAAiB,WAAA,OAAqBW,EAAAR,aAAItB,IAC1CyB,cAAe,SAACC,GAAD,OAAyBK,EAAAT,WAACI,EAAAA,CAAAA,UAAW1B,oDAY9B,WAAmD,IAAAA,EAAA,GAAAQ,MAAAC,KAAAC,aACtDX,EAAuBC,GAApCC,IAAAA,SACRoB,EAAOC,WAAItB,EAAAA,GAEXgC,EAAAA,UAAU,WACRR,EAASF,aAAIrB"}