var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { getRustAPI } from "./wasmLoader";
import { validateExtendedPublicKeyForNetwork, } from "@caravan/bitcoin";
export const decodeDescriptors = (internal, external, network) => __awaiter(void 0, void 0, void 0, function* () {
    const { ExtendedDescriptor, CaravanConfig, Network } = yield getRustAPI();
    const external_descriptor = ExtendedDescriptor.from_str(external);
    const internal_descriptor = ExtendedDescriptor.from_str(internal);
    let _network;
    if (network === "mainnet" || !network) {
        _network = "bitcoin";
    }
    else {
        _network = network;
    }
    const config = CaravanConfig.new(Network.from_str(_network), external_descriptor, internal_descriptor, "test1", "public");
    const configObj = JSON.parse(config.to_string_pretty());
    const requiredSigners = configObj.quorum.requiredSigners;
    const keyOrigins = configObj.extendedPublicKeys.map(({ bip32Path, xpub, xfp }) => {
        if (network) {
            const error = validateExtendedPublicKeyForNetwork(xpub, network);
            if (error) {
                throw new Error(`xpubs do not match expected network ${network}: ${error}`);
            }
        }
        return {
            bip32Path,
            xpub,
            xfp,
        };
    });
    return {
        addressType: config.address_type(),
        requiredSigners,
        keyOrigins,
        network: _network,
    };
});
export const encodeDescriptors = (config) => __awaiter(void 0, void 0, void 0, function* () {
    const bdk = yield getRustAPI();
    const { MultisigWalletConfig: RsWalletConfig } = bdk;
    const wallet = RsWalletConfig.from_str(JSON.stringify(config));
    return {
        receive: wallet.external_descriptor().to_string(),
        change: wallet.internal_descriptor().to_string(),
    };
});
const checksumRegex = /#[0-9a-zA-Z]{8}/g;
export const getChecksum = (descriptor) => __awaiter(void 0, void 0, void 0, function* () {
    // let's just check that the descriptor is valid
    try {
        yield getWalletFromDescriptor(descriptor);
    }
    catch (e) {
        if (e instanceof Error) {
            throw new Error(`Invalid descriptor: ${e.message}`);
        }
        else {
            throw e;
        }
    }
    const checksum = descriptor.match(checksumRegex);
    const pieces = descriptor.split("#");
    if (!checksum || pieces.length !== 2) {
        throw new Error("Could not find valid checksum");
    }
    return pieces[1];
});
export const getWalletFromDescriptor = (descriptor, network) => __awaiter(void 0, void 0, void 0, function* () {
    let internal = "", external = "";
    if (descriptor.includes("0/*")) {
        external = descriptor;
        internal = descriptor.replace(/0\/\*/g, "1/*").replace(checksumRegex, "");
    }
    else if (descriptor.includes("1/*")) {
        internal = descriptor;
        external = descriptor.replace(/1\/\*/g, "0/*").replace(checksumRegex, "");
    }
    return yield decodeDescriptors(internal, external, network);
});
export default { encodeDescriptors, decodeDescriptors };
