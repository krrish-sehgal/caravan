var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
let init;
let ExtendedDescriptor;
let CaravanConfig;
let Network;
let MultisigWalletConfig;
function initWasm() {
    return __awaiter(this, void 0, void 0, function* () {
        if (typeof window !== "undefined") {
            // Browser environment
            const module = yield import("../caravan-rs/pkg-web/caravan_rs");
            ({
                default: init,
                ExtendedDescriptor,
                CaravanConfig,
                Network,
                MultisigWalletConfig,
            } = module);
            // need to tell the js where the wasm module is to init with
            // this ends up getting called from built js code from wasm-pack build
            // so it's relative to that file
            yield init();
        }
        else {
            // Node.js environment
            const module = yield import("../caravan-rs/pkg-nodejs/caravan_rs");
            ({ ExtendedDescriptor, CaravanConfig, Network, MultisigWalletConfig } =
                module);
        }
    });
}
// export default bdkWasm;
export function getRustAPI() {
    return __awaiter(this, void 0, void 0, function* () {
        if (!init) {
            yield initWasm();
        }
        return { ExtendedDescriptor, CaravanConfig, Network, MultisigWalletConfig };
    });
}
