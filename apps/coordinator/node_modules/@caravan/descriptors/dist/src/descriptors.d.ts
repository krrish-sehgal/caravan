import { MultisigAddressType, Network } from "@caravan/bitcoin";
import { KeyOrigin } from "@caravan/wallets";
export type PolicyHmac = string;
export type RootFingerprint = string;
export interface MultisigWalletConfig {
    requiredSigners: number;
    addressType: MultisigAddressType;
    keyOrigins: KeyOrigin[];
    network: Network | "bitcoin";
}
export declare const decodeDescriptors: (internal: string, external: string, network?: Network | "bitcoin") => Promise<MultisigWalletConfig>;
export declare const encodeDescriptors: (config: MultisigWalletConfig) => Promise<{
    receive: string;
    change: string;
}>;
export declare const getChecksum: (descriptor: string) => Promise<string>;
export declare const getWalletFromDescriptor: (descriptor: string, network?: Network) => Promise<MultisigWalletConfig>;
declare const _default: {
    encodeDescriptors: (config: MultisigWalletConfig) => Promise<{
        receive: string;
        change: string;
    }>;
    decodeDescriptors: (internal: string, external: string, network?: Network | "bitcoin" | undefined) => Promise<MultisigWalletConfig>;
};
export default _default;
//# sourceMappingURL=descriptors.d.ts.map