/* tslint:disable */
/* eslint-disable */
/**
*/
export function init(): void;
/**
*/
export class CaravanConfig {
  free(): void;
/**
* @param {string} config
* @returns {CaravanConfig}
*/
  static from_str(config: string): CaravanConfig;
/**
* @param {Network} network
* @param {ExtendedDescriptor} external_descriptor
* @param {ExtendedDescriptor} internal_descriptor
* @param {string} name
* @param {string} client_type
* @returns {CaravanConfig}
*/
  static new(network: Network, external_descriptor: ExtendedDescriptor, internal_descriptor: ExtendedDescriptor, name: string, client_type: string): CaravanConfig;
/**
* @returns {string}
*/
  to_string(): string;
/**
* @returns {string}
*/
  to_string_pretty(): string;
/**
* @returns {string}
*/
  name(): string;
/**
* @returns {string}
*/
  address_type(): string;
/**
* @returns {ExtendedDescriptor}
*/
  external_descriptor(): ExtendedDescriptor;
/**
* @param {number} index
* @returns {string}
*/
  external_address(index: number): string;
/**
* @returns {ExtendedDescriptor}
*/
  internal_descriptor(): ExtendedDescriptor;
/**
* @param {number} index
* @returns {string}
*/
  internal_address(index: number): string;
/**
* @returns {Network}
*/
  network(): Network;
}
/**
*/
export class ExtendedDescriptor {
  free(): void;
/**
* @param {string} descriptor
* @returns {ExtendedDescriptor}
*/
  static from_str(descriptor: string): ExtendedDescriptor;
/**
* @returns {string}
*/
  to_string(): string;
/**
* @param {number} index
* @param {Network} network
* @returns {string}
*/
  get_address(index: number, network: Network): string;
}
/**
*/
export class MultisigWalletConfig {
  free(): void;
/**
* @param {string} config
* @returns {MultisigWalletConfig}
*/
  static from_str(config: string): MultisigWalletConfig;
/**
* @returns {string}
*/
  to_string(): string;
/**
* @returns {string}
*/
  to_string_pretty(): string;
/**
* @returns {ExtendedDescriptor}
*/
  external_descriptor(): ExtendedDescriptor;
/**
* @param {number} index
* @returns {string}
*/
  external_address(index: number): string;
/**
* @returns {ExtendedDescriptor}
*/
  internal_descriptor(): ExtendedDescriptor;
/**
* @param {number} index
* @returns {string}
*/
  internal_address(index: number): string;
/**
* @returns {Network}
*/
  network(): Network;
}
/**
*/
export class Network {
  free(): void;
/**
* @param {string} network
* @returns {Network}
*/
  static from_str(network: string): Network;
/**
* @returns {string}
*/
  to_string(): string;
}

export type InitInput = RequestInfo | URL | Response | BufferSource | WebAssembly.Module;

export interface InitOutput {
  readonly memory: WebAssembly.Memory;
  readonly __wbg_network_free: (a: number) => void;
  readonly network_from_str: (a: number, b: number, c: number) => void;
  readonly network_to_string: (a: number, b: number) => void;
  readonly init: () => void;
  readonly __wbg_extendeddescriptor_free: (a: number) => void;
  readonly extendeddescriptor_from_str: (a: number, b: number, c: number) => void;
  readonly extendeddescriptor_to_string: (a: number, b: number) => void;
  readonly extendeddescriptor_get_address: (a: number, b: number, c: number, d: number) => void;
  readonly __wbg_multisigwalletconfig_free: (a: number) => void;
  readonly multisigwalletconfig_from_str: (a: number, b: number, c: number) => void;
  readonly multisigwalletconfig_to_string: (a: number, b: number) => void;
  readonly multisigwalletconfig_to_string_pretty: (a: number, b: number) => void;
  readonly multisigwalletconfig_external_descriptor: (a: number, b: number) => void;
  readonly multisigwalletconfig_external_address: (a: number, b: number, c: number) => void;
  readonly multisigwalletconfig_internal_descriptor: (a: number, b: number) => void;
  readonly multisigwalletconfig_internal_address: (a: number, b: number, c: number) => void;
  readonly multisigwalletconfig_network: (a: number) => number;
  readonly __wbg_caravanconfig_free: (a: number) => void;
  readonly caravanconfig_from_str: (a: number, b: number, c: number) => void;
  readonly caravanconfig_new: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number) => void;
  readonly caravanconfig_to_string: (a: number, b: number) => void;
  readonly caravanconfig_to_string_pretty: (a: number, b: number) => void;
  readonly caravanconfig_name: (a: number, b: number) => void;
  readonly caravanconfig_address_type: (a: number, b: number) => void;
  readonly caravanconfig_external_descriptor: (a: number, b: number) => void;
  readonly caravanconfig_external_address: (a: number, b: number, c: number) => void;
  readonly caravanconfig_internal_descriptor: (a: number, b: number) => void;
  readonly caravanconfig_internal_address: (a: number, b: number, c: number) => void;
  readonly caravanconfig_network: (a: number) => number;
  readonly rustsecp256k1_v0_6_1_context_create: (a: number) => number;
  readonly rustsecp256k1_v0_6_1_context_destroy: (a: number) => void;
  readonly rustsecp256k1_v0_6_1_default_illegal_callback_fn: (a: number, b: number) => void;
  readonly rustsecp256k1_v0_6_1_default_error_callback_fn: (a: number, b: number) => void;
  readonly __wbindgen_add_to_stack_pointer: (a: number) => number;
  readonly __wbindgen_malloc: (a: number, b: number) => number;
  readonly __wbindgen_realloc: (a: number, b: number, c: number, d: number) => number;
  readonly __wbindgen_free: (a: number, b: number, c: number) => void;
  readonly __wbindgen_start: () => void;
}

export type SyncInitInput = BufferSource | WebAssembly.Module;
/**
* Instantiates the given `module`, which can either be bytes or
* a precompiled `WebAssembly.Module`.
*
* @param {SyncInitInput} module
*
* @returns {InitOutput}
*/
export function initSync(module: SyncInitInput): InitOutput;

/**
* If `module_or_path` is {RequestInfo} or {URL}, makes a request and
* for everything else, calls `WebAssembly.instantiate` directly.
*
* @param {InitInput | Promise<InitInput>} module_or_path
*
* @returns {Promise<InitOutput>}
*/
export default function __wbg_init (module_or_path?: InitInput | Promise<InitInput>): Promise<InitOutput>;
